package com.kutaybezci.monsterFight.gui;

import com.kutaybezci.monsterFight.Monster;
import com.kutaybezci.monsterFight.Question;
import com.kutaybezci.monsterFight.Translate;
import com.kutaybezci.monsterFight.Utils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.Base64;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kutay.bezci
 */
public class FrmMonsterEditor extends javax.swing.JFrame {

    private final Monster monster;

    public List<Question> getQuestions() {
        return this.monster.getQuestions();
    }

    /**
     * Creates new form ExamEditorFrm
     *
     * @param monster
     */
    public FrmMonsterEditor(Monster monster) {
        this.monster = monster;
        initComponents();
        Translate.getInstance().translate(this);
        this.txtDescription.setText(this.monster.getDescription());
        this.txtHealth.setText(String.valueOf(this.monster.getHealth()));
        this.txtMaxActiveQuestion.setText(String.valueOf(this.monster.getMaxActiveQuestion()));
        this.txtMonsterName.setText(this.monster.getName());
        this.txtPassword.setText(this.monster.getPassword());
        this.txtPlayerHealth.setText(String.valueOf(this.monster.getPlayerHealth()));
        this.txtSecretMessage.setText(this.monster.getSecretMessage());
        this.refreshTable();
    }

    public void setMonster() {
        Utils.setField(this.txtDescription, this.lblDescription.getText(), this.monster, Monster::setDescription);
        Utils.setIntegerField(this.txtHealth, this.lblHealth.getText(), this.monster, Monster::setHealth);
        Utils.setIntegerField(this.txtMaxActiveQuestion, this.lblMaxActiveQuestion.getText(), this.monster, Monster::setMaxActiveQuestion);
        Utils.setField(this.txtMonsterName, this.lblMonsterName.getText(), this.monster, Monster::setName);
        Utils.setField(this.txtPassword, this.lblPassword.getText(), this.monster, Monster::setPassword);
        Utils.setIntegerField(this.txtPlayerHealth, this.lblPlayerHealth.getText(), this.monster, Monster::setPlayerHealth);
        Utils.setField(this.txtSecretMessage, this.lblSecretMessage.getText(), this.monster, Monster::setSecretMessage);
    }

    public static String[] questionToRow(Question question) {
        String[] strQuestionRow = new String[6];
        strQuestionRow[0] = question.getQuestion();
        strQuestionRow[1] = question.getAnswer();
        strQuestionRow[2] = String.valueOf(question.getScreenSeconds());
        strQuestionRow[3] = String.valueOf(question.getBonus());
        strQuestionRow[4] = String.valueOf(question.getPenalty());
        strQuestionRow[5] = String.valueOf(question.getBleed());
        return strQuestionRow;
    }

    public final void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) this.tblQuestion.getModel();
        model.setRowCount(0);
        this.monster.getQuestions().forEach(q -> model.addRow(questionToRow(q)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblQuestion = new javax.swing.JTable();
        btnAddQuestion = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDisplay = new javax.swing.JButton();
        lblMonsterName = new javax.swing.JLabel();
        txtMonsterName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        lblDescription = new javax.swing.JLabel();
        lblHealth = new javax.swing.JLabel();
        txtHealth = new javax.swing.JTextField();
        lblPlayerHealth = new javax.swing.JLabel();
        txtPlayerHealth = new javax.swing.JTextField();
        lblMaxActiveQuestion = new javax.swing.JLabel();
        txtMaxActiveQuestion = new javax.swing.JTextField();
        lblSecretMessage = new javax.swing.JLabel();
        txtSecretMessage = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        tblQuestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "colQuestion", "colAnswer", "colTime", "colBonus", "colPenalty", "colBleed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblQuestion);
        if (tblQuestion.getColumnModel().getColumnCount() > 0) {
            tblQuestion.getColumnModel().getColumn(0).setResizable(false);
            tblQuestion.getColumnModel().getColumn(0).setPreferredWidth(500);
            tblQuestion.getColumnModel().getColumn(1).setResizable(false);
            tblQuestion.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblQuestion.getColumnModel().getColumn(2).setResizable(false);
            tblQuestion.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblQuestion.getColumnModel().getColumn(3).setResizable(false);
            tblQuestion.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblQuestion.getColumnModel().getColumn(4).setResizable(false);
            tblQuestion.getColumnModel().getColumn(4).setPreferredWidth(100);
            tblQuestion.getColumnModel().getColumn(5).setResizable(false);
            tblQuestion.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        btnAddQuestion.setText("btnAddQuestion");
        btnAddQuestion.setToolTipText("");
        btnAddQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQuestionActionPerformed(evt);
            }
        });

        btnSave.setText("btnSave");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDisplay.setText("btnDisplay");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        lblMonsterName.setText("lblMonsterName");

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        lblDescription.setText("lblDescription");

        lblHealth.setText("lblHealth");

        lblPlayerHealth.setText("lblPlayerHealth");

        lblMaxActiveQuestion.setText("lblMaxActiveQuestion");

        lblSecretMessage.setText("lblSecretMessage");

        lblPassword.setText("lblPassword");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMonsterName)
                            .addComponent(lblDescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMonsterName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHealth)
                                    .addComponent(lblPlayerHealth)
                                    .addComponent(lblMaxActiveQuestion)
                                    .addComponent(lblSecretMessage)
                                    .addComponent(lblPassword))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtSecretMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                .addComponent(txtMaxActiveQuestion, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPlayerHealth, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtHealth, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddQuestion)
                    .addComponent(btnDisplay))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMonsterName)
                    .addComponent(txtMonsterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHealth)
                    .addComponent(txtHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescription)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblPlayerHealth)
                                .addComponent(txtPlayerHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaxActiveQuestion)
                            .addComponent(txtMaxActiveQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSecretMessage)
                            .addComponent(txtSecretMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQuestionActionPerformed
        new FrmQuestionDisplay(this, -1).setVisible(true);
    }//GEN-LAST:event_btnAddQuestionActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        int i = this.tblQuestion.getSelectedRow();
        System.out.println(this.tblQuestion.getSelectedRow());
        if (i == -1) {
            JOptionPane.showMessageDialog(this, "Seçili soru yok", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }
        new FrmQuestionDisplay(this, i).setVisible(true);
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            setMonster();
            File monsterFolder = new File("monsters");
            if (!monsterFolder.exists()) {
                monsterFolder.mkdir();
            }
            File fmonster = new File(monsterFolder, this.monster.getName());
            if (fmonster.exists()) {
                Translate translate = Translate.getInstance();
                if (JOptionPane.showConfirmDialog(this, translate.translateFormat("msgMonsterExists", this.monster.getName()), translate.translate("titleWarning"), JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }
            try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    ObjectOutputStream os = new ObjectOutputStream(bos);
                    FileOutputStream fos = new FileOutputStream(fmonster)) {
                os.writeObject(this.monster);
                byte[] bytes = bos.toByteArray();
                bytes = Base64.getEncoder().encode(bytes);
                fos.write(bytes);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMonsterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMonsterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMonsterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMonsterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMonsterEditor(new Monster()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddQuestion;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblHealth;
    private javax.swing.JLabel lblMaxActiveQuestion;
    private javax.swing.JLabel lblMonsterName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPlayerHealth;
    private javax.swing.JLabel lblSecretMessage;
    private javax.swing.JTable tblQuestion;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtHealth;
    private javax.swing.JTextField txtMaxActiveQuestion;
    private javax.swing.JTextField txtMonsterName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPlayerHealth;
    private javax.swing.JTextField txtSecretMessage;
    // End of variables declaration//GEN-END:variables
}
